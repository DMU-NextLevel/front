import React, { useState, useEffect, ChangeEvent } from 'react';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import Swal from 'sweetalert2';
import { api } from '../../AxiosInstance';

import Sidebar from './Sidebar';
import SettingsOverlay from './SettingsOverlay';
import RecentOverlay from './RecentOverlay';
import PointOverlay from './PointOverlay';
import LikeOverlay from './LikeOverlay';
import FundingOverlay from './FundingOverlay';
import MainContent from './MainContent';

const MyPage = () => {
  const [fundingCount, setFundingCount] = useState<number>(0);
  const [homePhone, setHomePhone] = useState({ area: '02', number: '' });
  const [showRecentView, setShowRecentView] = useState(false);
  const [showSettingsOverlay, setShowSettingsOverlay] = useState(false);
  const [showPointOverlay, setShowPointOverlay] = useState(false);
  const [showLikeOverlay, setShowLikeOverlay] = useState(false);
  const [showFundingOverlay, setShowFundingOverlay] = useState(false);
  const navigate = useNavigate();

  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [tempProfileImage, setTempProfileImage] = useState<string | null>(null);
  const [point, setPoint] = useState(0);
  const [activeTab, setActiveTab] = useState<'ÏÑúÌè¨ÌÑ∞' | 'Î©îÏù¥Ïª§'>('ÏÑúÌè¨ÌÑ∞');

  const [userInfo, setUserInfo] = useState({
    name: 'ÍπÄÏ∞¨ÏòÅ',
    nickname: 'ÎÑ•Ïä§Ìä∏Î†àÎ≤®',
    phone: '010-6672-6024',
    email: 'kcy021216@gmail.com',
    password: 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÌïòÍ∏∞',
    passwordcf: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏',
  });
  const [tempUserInfo, setTempUserInfo] = useState(userInfo);

  const [editFields, setEditFields] = useState<{ [key: string]: boolean }>({});
  const [selectedFilter, setSelectedFilter] = useState('Ï†ÑÏ≤¥');

  // üìå Í≥µÌÜµ Îã´Í∏∞
  const closeAll = () => {
    setShowRecentView(false);
    setShowSettingsOverlay(false);
    setShowPointOverlay(false);
    setShowLikeOverlay(false);
    setShowFundingOverlay(false);
  };

  // üìå Î©îÎâ¥ ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleClick = (menu: string) => {
    switch (menu) {
      case 'ÎÇ¥ Ï†ïÎ≥¥ ÏÑ§Ï†ï':
        setShowSettingsOverlay(true);
        break;
      case 'ÏµúÍ∑ºÎ≥∏':
        setShowRecentView(true);
        break;
      case 'Ìè¨Ïù∏Ìä∏ Ï∂©Ï†Ñ':
        setShowPointOverlay(true);
        break;
      case 'Ï¢ãÏïÑÏöî':
        setShowLikeOverlay(true);
        break;
      case 'ÌéÄÎî© Î™©Î°ù':
        setShowFundingOverlay(true);
        break;
      case 'ÎÇ¥ ÌîÑÎ°úÏ†ùÌä∏':
        // ‚úÖ ÌéòÏù¥ÏßÄ Ïù¥ÎèôÏúºÎ°ú Î≥ÄÍ≤Ω
        navigate('/mypage/myprojects');
        break;
      case 'ÌåîÎ°úÏûâ':
        navigate('/following');
        break;
      default:
        Swal.fire({
          title: 'ÏïåÎ¶º',
          text: `'${menu}' Î©îÎâ¥Î°ú Ïù¥ÎèôÌï©ÎãàÎã§.'`,
          confirmButtonColor: '#a66cff',
        });
        break;
    }
  };

  // ‚úÖ Ìè¨Ïù∏Ìä∏ Ïò§Î≤ÑÎ†àÏù¥ Ïó¥Î¶¥ Îïå Ïä§ÌÅ¨Î°§ ÎßâÍ∏∞
  useEffect(() => {
    if (showPointOverlay) {
      const originalStyle = window.getComputedStyle(document.body).overflow;
      document.body.style.overflow = 'hidden';
      return () => {
        document.body.style.overflow = originalStyle;
      };
    }
  }, [showPointOverlay]);

  // üìå Toss Í≤∞Ï†ú ÌåùÏóÖ Ïó¥Í∏∞
  const openPaymentWindow = (amount: number) => {
    const width = 700;
    const height = 900;
    const left = window.screenX + (window.outerWidth - width) / 2;
    const top = window.screenY + (window.outerHeight - height) / 2;
    const url = `/popup-payment?amount=${amount}`;

    window.open(
      url,
      'toss_payment_popup',
      `width=${width},height=${height},left=${left},top=${top},resizable=no,scrollbars=no`
    );

    const messageListener = (event: MessageEvent) => {
      if (event.origin !== window.location.origin) return;

      if (event.data === 'payment-success') {
        api.get('/social/user/my-point').then((res) => {
          setPoint(res.data.data.point);
        });
        window.removeEventListener('message', messageListener);
      }
    };

    window.addEventListener('message', messageListener);
  };

  // üìå API - ÌéÄÎî© Ïπ¥Ïö¥Ìä∏
  useEffect(() => {
    api
      .post('/public/project/all', { tag: [], page: 0, myPageWhere: 'PROJECT' })
      .then((res) => setFundingCount(res.data.data.totalCount))
      .catch((e) => console.log(e));
  }, []);

  return (
    <Container>
      <Sidebar
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        userInfo={userInfo}
        profileImage={profileImage}
        onOpenSettings={() => handleClick('ÎÇ¥ Ï†ïÎ≥¥ ÏÑ§Ï†ï')}
        onOpenRecent={() => handleClick('ÏµúÍ∑ºÎ≥∏')}
        onOpenPoint={() => handleClick('Ìè¨Ïù∏Ìä∏ Ï∂©Ï†Ñ')}
        onOpenLike={() => handleClick('Ï¢ãÏïÑÏöî')}
        onOpenFunding={() => handleClick('ÌéÄÎî© Î™©Î°ù')}
        onOpenFollowing={() => handleClick('ÌåîÎ°úÏûâ')}
        onOpenMyProjects={() => handleClick('ÎÇ¥ ÌîÑÎ°úÏ†ùÌä∏')}
      />

      <MainContent
        userInfo={userInfo}
        fundingCount={fundingCount}
        point={point}
        selectedFilter={selectedFilter}
        setSelectedFilter={setSelectedFilter}
        onHandleClick={(label) => handleClick(label)}
      />

      {showRecentView && (
        <RecentOverlay
          onClose={closeAll}
          selectedFilter={selectedFilter}
          setSelectedFilter={setSelectedFilter}
          allTags={[]}
          userInfo={userInfo}
          tempUserInfo={tempUserInfo}
          profileImage={profileImage}
          tempProfileImage={tempProfileImage}
        />
      )}

      {showLikeOverlay && (
        <LikeOverlay
          onClose={closeAll}
          selectedFilter={selectedFilter}
          setSelectedFilter={setSelectedFilter}
        />
      )}

      {showPointOverlay && (
        <PointOverlay
          onClose={() => setShowPointOverlay(false)}
          point={point}
          openPaymentWindow={openPaymentWindow}
        />
      )}

      {showFundingOverlay && <FundingOverlay onClose={closeAll} />}
    </Container>
  );
};

export default MyPage;

/* ---------------------- Styled Components ---------------------- */
const Container = styled.div`
  display: flex;
  padding: 15px;
  box-sizing: border-box;
  font-family: 'Pretendard', sans-serif;
  width: 100%;
  max-width: 100vw;
  min-height: 100vh;
  overflow-x: hidden;
`;
